(() => {
  // src/api.ts
  function api(object, fn, ...fnArgs) {
    return new Promise((resolve, reject) => {
      const cb = (cbArg) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(cbArg);
        }
      };
      object[fn](...fnArgs, cb);
    });
  }

  // src/options.ts
  var api2 = (...args) => api(...args).finally(() => updateStatus());
  function updateStatus() {
    const lastError = chrome.runtime.lastError;
    if (lastError) {
      console.error(lastError.message);
      ui.statusText.textContent = lastError.message || "Unknown error";
    } else {
      ui.statusText.textContent = "";
    }
  }
  var ui = {
    statusText: document.getElementById("status-text"),
    addForm: document.getElementById("add-form"),
    primaryPatternInput: document.getElementById("pri-url"),
    secondaryPatternInput: document.getElementById("sec-url"),
    settingDropdown: document.getElementById("setting"),
    setAllButton: document.getElementById("set-all-btn"),
    clearAllButton: document.getElementById("clear-all-btn"),
    table: document.getElementById("current-settings-table")
  };
  function keyForEntry(entry) {
    return `${entry.primaryPattern};${entry.secondaryPattern}`;
  }
  var currentSettings = {};
  function onSyncedSettings(cookieSettings) {
    currentSettings = cookieSettings || {};
    updateTable(currentSettings);
  }
  async function removeEntry(entry) {
    await api2(chrome.contentSettings.cookies, "clear", {});
    const { [keyForEntry(entry)]: removedEntry, ...remainingEntries } = currentSettings;
    await Promise.allSettled(Object.values(remainingEntries).map((entry2) => api2(chrome.contentSettings.cookies, "set", entry2)));
    await api2(chrome.storage.sync, "set", { cookieSettings: remainingEntries });
  }
  api2(chrome.storage.sync, "get", "cookieSettings").then(({ cookieSettings }) => onSyncedSettings(cookieSettings));
  chrome.storage.onChanged.addListener(({ cookieSettings }) => {
    if (cookieSettings) {
      onSyncedSettings(cookieSettings.newValue);
    }
  });
  ui.addForm.addEventListener("submit", async (event) => {
    event.preventDefault();
    const entry = {
      primaryPattern: ui.primaryPatternInput.value,
      secondaryPattern: ui.secondaryPatternInput.value || void 0,
      setting: ui.settingDropdown.value
    };
    await api2(chrome.contentSettings.cookies, "set", entry);
    await api2(chrome.storage.sync, "set", {
      cookieSettings: {
        ...currentSettings,
        [keyForEntry(entry)]: entry
      }
    });
  });
  ui.setAllButton.addEventListener("click", () => {
    for (const entry of Object.values(currentSettings)) {
      api2(chrome.contentSettings.cookies, "set", entry);
    }
  });
  ui.clearAllButton.addEventListener("click", async () => {
    if (window.confirm("Clear all settings?")) {
      await api2(chrome.contentSettings.cookies, "clear", {});
      await api2(chrome.storage.sync, "clear");
    }
  });
  function updateTable(cookieSettings) {
    const newTableBody = document.createElement("tbody");
    const sortedKeys = Object.keys(cookieSettings).sort();
    for (const key of sortedKeys) {
      const entry = cookieSettings[key];
      newTableBody.appendChild(createTableRow(entry));
    }
    ui.table.replaceChild(newTableBody, ui.table.getElementsByTagName("tbody")[0]);
  }
  function createTableRow(entry) {
    const row = document.createElement("tr");
    const primaryPatternCell = document.createElement("td");
    primaryPatternCell.textContent = entry.primaryPattern;
    row.appendChild(primaryPatternCell);
    const secondaryPatternCell = document.createElement("td");
    secondaryPatternCell.textContent = entry.secondaryPattern || "*";
    row.appendChild(secondaryPatternCell);
    const settingCell = document.createElement("td");
    settingCell.textContent = entry.setting;
    row.appendChild(settingCell);
    const removeButton = document.createElement("button");
    removeButton.textContent = "Remove";
    removeButton.onclick = () => removeEntry(entry);
    const removeButtonCell = document.createElement("td");
    removeButtonCell.appendChild(removeButton);
    row.appendChild(removeButtonCell);
    return row;
  }
})();
//# sourceMappingURL=data:application/json;base64,
